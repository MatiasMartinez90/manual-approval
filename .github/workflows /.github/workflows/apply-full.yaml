name: Deploy with Terraform
on:
  push:
    branches:
      - main
jobs:
  terraform_plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      
   
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Create AWS default profile
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=us-east-1" >> ~/.aws/config
          
      - name: Initialize Terraform
        run: terraform init
        
      - name: Terraform Format Check
        run: terraform fmt -recursive -check
        
      - name: Terraform Validate
        run: terraform validate
        
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest
          
      - name: Initialize TFLint
        run: tflint --init
        
      - name: Run TFLint
        run: tflint -f compact
        
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: false
          format: sarif
          output: tfsec.sarif
          
      - name: Upload tfsec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec.sarif
          
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov.sarif
          soft_fail: false
          
      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif
          
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          
      - name: Generate Infracost breakdown
        run: |
          infracost breakdown --path . \
            --format json \
            --out-file infracost-base.json
            
      - name: Post Infracost comment
        run: |
          infracost comment github --path infracost-base.json \
            --repo ${{ github.repository }} \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --pull-request ${{ github.event.pull_request.number || github.run_number }} \
            --behavior update
        
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
          retention-days: 5
          
  manual_approval:
    name: Wait for Manual Approval
    needs: terraform_plan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      issues: write
    
    steps:
      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: mmartinezconexa  # Reemplaza con tu usuario o usuarios separados por comas
          minimum-approvals: 1
          issue-title: "Aprobar Terraform Apply para despliegue en producciÃ³n"
          issue-body: "Por favor, aprueba o rechaza este despliegue de infraestructura con Terraform respondiendo con 'approve' o 'deny'."
          
  terraform_apply:
    name: Terraform Apply
    needs: manual_approval
    runs-on: ubuntu-latest
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Create AWS default profile
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=us-east-1" >> ~/.aws/config
          
      - name: Initialize Terraform
        run: terraform init
        
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          
      - name: Apply Terraform
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
